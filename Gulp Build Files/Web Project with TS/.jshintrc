{
    // --------------------------------------------------------------------
    // JSHint Configuration, Strict Edition
    // --------------------------------------------------------------------
    //
    // This is a options template for [JSHint][1], using [JSHint example][2]
    // and [Ory Band's example][3] as basis and setting config values to
    // be most strict:
    //
    // * set all enforcing options to true
    // * set all relaxing options to false
    // * set all environment options to false, except the browser value
    // * set all JSLint legacy options to false
    //
    // [1]: http://www.jshint.com/
    // [2]: https://github.com/jshint/node-jshint/blob/master/example/config.json
    // [3]: https://github.com/oryband/dotfiles/blob/master/jshintrc
    //
    // @author http://michael.haschke.biz/
    // @license http://unlicense.org/
    // == Enforcing Options ===============================================
    //
    // These options tell JSHint to be more strict towards your code. Use
    // them if you want to allow only a safe subset of JavaScript, very
    // useful when your codebase is shared with a big number of developers
    // with different skill levels.

    "bitwise": true, // Prohibit bitwise operators (&, |, ^, etc.).
    "camelcase": true, // variable names camelCase or UPPER_CASE
    "curly": true, // Require {} for every new block or scope.
    "eqeqeq": true, // no == and != : Require triple equals i.e. `===`.
    "es3": true, // ECMAScript 3 specification (detect extra comma)
    "forin": true, // for in loops must filter object's items. Tolerate `for in` loops without `hasOwnPrototype`.
    "freeze": false, // prevent overwriting native objects
    "immed": true, // immediate function invocations must be wrapped in () : e.g. `( function(){}() );`
    //"indent"         : 2,         // enforces specific tab width
    "latedef": true, // prohibits use of variable before it is defined
    "newcap": true, // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg": true, // prohibits arguments.caller and arguments.callee
    "noempty": true, // warns about empty blocks
    "nonew": true, // constructors can't have side effects
    "plusplus": true, // no ++ and --
    //"quotmark"       : true,      // enforces consistency of quotation marks (true, single, double
    //"regexp"        : true,     // Prohibit `.` and `[^...]` in regular expressions.
    "undef": true, // prohibits use of explicitly undeclared variables
    "unused": true, // warns when defined variables are never used
    "strict": true, // ECMAScript 5 strict mode: Require `use strict` pragma in every file.
    "trailing": true, // no trailing whitespace
    "maxparams": 1000, // max number of parameters allowed per function
    "maxdepth": 1000, // controls how nested blocks can be
    "maxstatements": 1000, // max number of statements per function
    "maxcomplexity": 1000, // cyclomatic complexity
    "maxlen": 100, // max length of a line

    // == Relaxing Options ================================================
    //
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.

    "asi": false, // missing ; Tolerate Automatic Semicolon Insertion (no semicolons).
    "boss": false, // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "debug": false, // debugger statements
    "eqnull": false, // Tolerate use of `== null`.
    "es5": false, // Allow EcmaScript 5 syntax.
    "esnext": false, // ECMAScript 6 syntax. e.g. Allow ES.next specific features such as `const` and `let`.
    "evil": false, // Tolerate use of `eval`.
    "expr": false, // Tolerate `ExpressionStatement` as Programs.
    "funcscope": false, // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "gcl": false, // compatible with Google Closure Compiler
    "globalstrict": false, // suppresses warning about global strict mode
    "iterator": false, // Allow usage of __iterator__ property.
    "lastsemic": false, // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak": false, // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma": false, // Suppress warnings about comma-first coding style.
    "loopfunc": false, // Allow functions to be defined within loops.
    "maxerr": 1000, // max amount of warnings JSHint will reproduce before giving up
    "moz": false, // using mozilla js extensions
    "multistr": false, // Tolerate multi-line strings.
    "notypeof": false, // invalid typeof operator values
    "onecase": false, // Tolerate switches with just one case.
    "proto": false, // Tolerate __proto__ property. This property is deprecated.
    "regexdash": false, // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl": false, // Tolerate script-targeted URLs.
    "smarttabs": false, // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
    "shadow": false, // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "sub": false, // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew": false, // Tolerate `new function () { ... };` and `new Object;`.
    "validthis": false, // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.

    // == Environments ====================================================
    //
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environmentsâ€”such as
    // browser or node.js.

    "browser": true, // defines globals exposed by modern browsers
    "couch": false, // defines globals exposed by CouchDB
    "devel": false, // Allow development statements e.g. `console.log();`.
    "dojo": false, // Dojo Toolkit
    "jquery": true, // Enable globals exposed by jQuery JavaScript library.
    "mootools": false, // Enable globals exposed by MooTools JavaScript framework.
    "node": false, // Enable globals available when code is running inside of the NodeJS runtime environment.
    "nonstandard": false, // Define non-standard but widely adopted globals such as escape and unescape.
    "phantom": false, // PhantomJS runtime environment
    "prototypejs": false, // Enable globals exposed by Prototype JavaScript framework.
    "rhino": false, // Enable globals available when your code is running inside of the Rhino runtime environment.
    "wsh": false, // Enable globals available when your code is running as a script for the Windows Script Host.
    "worker": false, // Web Worker
    "yui": false, // YUI framework

    // == JSLint Legacy ===================================================
    //
    // These options are legacy from JSLint. Aside from bug fixes they will
    // not be improved in any way and might be removed at any point.

    "nomen": false, // Prohibit use of initial or trailing underbars in names.
    "onevar": false, // Allow only one `var` statement per function.
    "passfail": false, // Stop on first error.
    "white": false, // Check against strict whitespace and indentation rules.

    //Custom globals
    "predef": [
        "angular"
    ]

}
